// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart'
    show Firebase, FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static Future initializeApp() async => await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['AndroidApiKey']!,
    appId: dotenv.env['AndroidAppId']!,
    messagingSenderId: dotenv.env['AndroidMessagingSenderId']!,
    projectId: dotenv.env['AndroidProjectId']!,
    storageBucket: dotenv.env['AndroidStorageBucket']!,
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['IosApiKey']!,
    appId: dotenv.env['IosAppId']!,
    messagingSenderId: dotenv.env['IosMessagingSenderId']!,
    projectId: dotenv.env['IosProjectId']!,
    storageBucket: dotenv.env['IosStorageBucket']!,
    iosClientId: dotenv.env['IosClientId']!,
    iosBundleId: dotenv.env['IosBundleId']!,
  );
}
